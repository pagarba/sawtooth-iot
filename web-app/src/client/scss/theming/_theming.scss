@import 'palette';


// For a given hue in a palette, return the contrast color from the map of contrast palettes.
// @param $color-map
// @param $hue
@function paragba-contrast($palette, $hue) {
  @return map-get(map-get($palette, contrast), $hue);
}


// Creates a map of hues to colors for a theme. This is used to define a theme palette in terms
// of the Material Design hues.
// @param $color-map
// @param $primary
// @param $lighter
@function paragba-palette($base-palette, $default: 500, $lighter: 100, $darker: 700) {
  $result: map_merge($base-palette, ( default: map-get($base-palette, $default), lighter: map-get($base-palette, $lighter), darker: map-get($base-palette, $darker), default-contrast: paragba-contrast($base-palette, $default), lighter-contrast: paragba-contrast($base-palette, $lighter), darker-contrast: paragba-contrast($base-palette, $darker) ));

  // For each hue in the palette, add a "-contrast" color to the map.
  @each $hue, $color in $base-palette {
    $result: map_merge($result, ( '#{$hue}-contrast': paragba-contrast($base-palette, $hue) ));
  }

  @return $result;
}


// Gets a color from a theme palette (the output of paragba-palette).
// The hue can be one of the standard values (500, A400, etc.), one of the three preconfigured
// hues (default, lighter, darker), or any of the aforementioned prefixed with "-contrast".
//
// @param $color-map The theme palette (output of paragba-palette).
// @param $hue The hue from the palette to use. If this is a value between 0 and 1, it will
//     be treated as opacity.
// @param $opacity The alpha channel value for the color.
@function paragba-color($palette, $hue: default, $opacity: null) {
  // If hueKey is a number between zero and one, then it actually contains an
  // opacity value, so recall this function with the default hue and that given opacity.
  @if type-of($hue) == number and $hue >= 0 and $hue <= 1 {
    @return paragba-color($palette, default, $hue);
  }

  $color: map-get($palette, $hue);
  $opacity: if($opacity == null, opacity($color), $opacity);

  @return rgba($color, $opacity);
}


// Creates a container object for a light theme to be given to individual component theme mixins.
@function paragba-light-theme($primary, $accent, $warn, $paragba-fonts) {
  @return ( primary: $primary, accent: $accent, warn: $warn, is-dark: false, foreground: $paragba-light-theme-foreground, background: $paragba-light-theme-background, fonts: $paragba-fonts);
}


// Creates a container object for a dark theme to be given to individual component theme mixins.
@function paragba-dark-theme($primary, $accent, $warn, $paragba-fonts) {
  @return ( primary: $primary, accent: $accent, warn: $warn, is-dark: true, foreground: $paragba-dark-theme-foreground, background: $paragba-dark-theme-background, fonts: $paragba-fonts);
}

$paragba-fonts: ( icon-3x-large: 48px, icon-2x-large: 36px, icon-x-large: 28px, icon-large: 22px, icon-normal: 16px, icon-small: 13px, heading-1: 24px, heading-2: 16px, heading-3: 13px, heading-4: 11px, text-x-large: 24px, text-large: 14px, text-normal: 12px, text-small: 11px, text-x-small: 10px, text-2x-small: 8px );

$responsive-points: ( tablet: 768px, notebook: 992px, desktop: 1200px );